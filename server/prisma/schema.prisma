generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Tenant Management
model Tenant {
  id          String   @id @default(cuid())
  name        String
  type        TenantType
  status      String   @default("active") // active, inactive, suspended
  description String?  // Changed from 'notes' to 'description'

  // Relations
  users       User[]
  businessUnits BusinessUnit[]
  accounts    Account[]
  deals       Deal[]
  tasks       Task[]
  customers   Customer[]

  @@map("tenants")
}

enum TenantType {
  HQ
  SALES_OFFICE
}

// Enhanced User Model with Roles and Permissions
model User {
  id             String   @id @default(cuid())
  firstName      String
  lastName       String
  email          String   @unique
  password       String
  phone          String?
  role           UserRole
  tenantId       String
  businessUnitId String?
  status         String   @default("active")
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  tenant         Tenant   @relation(fields: [tenantId], references: [id])
  businessUnit   BusinessUnit? @relation(fields: [businessUnitId], references: [id])
  managedUnits   BusinessUnit[] @relation("BusinessUnitManager")
  managedAccounts Account[]      @relation("AccountManager")
  deals          Deal[]
  tasks          Task[]
  userPermissions UserPermission[]

  @@map("users")
}

enum UserRole {
  SYSTEM_ADMIN      // Can manage everything across all tenants
  HQ_ADMIN          // HQ backoffice admin
  MARKETING_MANAGER // Marketing team at HQ
  FINANCE_MANAGER   // Finance team at HQ
  ACCOUNT_MANAGER   // Account management team at HQ
  TENANT_ADMIN      // Tenant-level admin
  SALES_MANAGER     // Sales office manager
  SALES_REP         // Sales representative
  SUPPORT           // Support staff
}

// Permission System
model Permission {
  id          String   @id @default(cuid())
  name        String   @unique
  description String
  resource    String   // e.g., "accounts", "deals", "reports"
  action      String   // e.g., "read", "write", "delete", "manage"
  createdAt   DateTime @default(now())

  // Relations
  userPermissions UserPermission[]
  rolePermissions RolePermission[]

  @@map("permissions")
}

model UserPermission {
  id           String     @id @default(cuid())
  userId       String
  permissionId String
  granted      Boolean    @default(true)
  createdAt    DateTime   @default(now())

  // Relations
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@unique([userId, permissionId])
  @@map("user_permissions")
}

model RolePermission {
  id           String     @id @default(cuid())
  role         UserRole
  permissionId String
  granted      Boolean    @default(true)
  createdAt    DateTime   @default(now())

  // Relations
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@unique([role, permissionId])
  @@map("role_permissions")
}

// Business Units (now tenant-specific)
model BusinessUnit {
  id        String   @id @default(cuid())
  name      String
  address   String?  // Made optional
  city      String
  state     String
  postalCode String
  country   String   @default("Zambia") // Default to Zambia
  managerId String?
  tenantId  String
  status    String   @default("active")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  tenant    Tenant   @relation(fields: [tenantId], references: [id])
  manager   User?    @relation("BusinessUnitManager", fields: [managerId], references: [id])
  users     User[]
  accounts  Account[]

  @@map("business_units")
}

// Accounts (now tenant-specific)
model Account {
  id               String   @id @default(cuid())
  name             String
  type             String   // 'company' or 'individual'
  registrationNumber String?
  taxNumber        String?
  address          String
  city             String
  state            String
  postalCode       String
  country          String
  phone            String
  email            String
  website          String?
  status           String   @default("active")
  tenantId         String
  businessUnitId   String?
  accountManagerId String?
  creditLimit      Float    @default(0)
  paymentTerms     String
  industry         String
  notes            String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relations
  tenant         Tenant   @relation(fields: [tenantId], references: [id])
  businessUnit   BusinessUnit? @relation(fields: [businessUnitId], references: [id])
  accountManager User?    @relation("AccountManager", fields: [accountManagerId], references: [id])
  deals          Deal[]
  contactPersons ContactPerson[]

  @@map("accounts")
}

// Customers (now tenant-specific)
model Customer {
  id        String   @id @default(cuid())
  firstName String
  lastName  String
  email     String
  phone     String?
  company   String?
  status    String   @default("lead")
  source    String?
  notes     String?
  tenantId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  tenant    Tenant   @relation(fields: [tenantId], references: [id])
  deals     Deal[]

  @@unique([email, tenantId])
  @@map("customers")
}

// Deals (now tenant-specific)
model Deal {
  id          String   @id @default(cuid())
  title       String
  description String
  amount      Float
  currency    String   @default("ZMW")
  stage       String
  probability Int
  customerId  String?
  accountId   String?
  tenantId    String
  assignedTo  String?
  dealType    String
  source      String?
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  tenant      Tenant   @relation(fields: [tenantId], references: [id])
  customer    Customer? @relation(fields: [customerId], references: [id])
  account     Account?  @relation(fields: [accountId], references: [id])
  assignedUser User?    @relation(fields: [assignedTo], references: [id])

  @@map("deals")
}

// Tasks (now tenant-specific)
model Task {
  id          String    @id @default(cuid())
  title       String
  description String
  dueDate     DateTime?
  status      String    @default("pending")
  priority    String    @default("medium")
  tenantId    String
  assignedTo  String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  tenant      Tenant   @relation(fields: [tenantId], references: [id])
  assignedUser User?   @relation(fields: [assignedTo], references: [id])

  @@map("tasks")
}

// Contact Persons
model ContactPerson {
  id        String   @id @default(cuid())
  accountId String
  firstName String
  lastName  String
  position  String
  phone     String
  email     String
  isPrimary Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  account Account @relation(fields: [accountId], references: [id])

  @@map("contact_persons")
}